
type Participant @aws_iam @aws_api_key {
  id: ID!
  name: String
  reference: String
  address: String
  city: String
  stateProv: String
  postalCode: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Transaction @aws_iam @aws_api_key {
  id: ID!
  transDate: AWSDate
  accountID: ID!
  category: String
  type: String
  notes: String
  cleared: Boolean
  amount: Float
  Participant: Participant
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  transactionParticipantId: ID
}

type Account @aws_iam @aws_api_key {
  id: ID!
  reference: String
  type: String
  balance: Float
  institutionID: ID!
  Transactions(filter: ModelTransactionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTransactionConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Institution @aws_iam @aws_api_key {
  id: ID!
  name: String
  Accounts(filter: ModelAccountFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAccountConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelParticipantConnection @aws_api_key @aws_iam {
  items: [Participant]!
  nextToken: String
}

input ModelParticipantFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  reference: ModelStringInput
  address: ModelStringInput
  city: ModelStringInput
  stateProv: ModelStringInput
  postalCode: ModelStringInput
  and: [ModelParticipantFilterInput]
  or: [ModelParticipantFilterInput]
  not: ModelParticipantFilterInput
}

type Query {
  getParticipant(id: ID!): Participant @aws_api_key @aws_iam
  listParticipants(filter: ModelParticipantFilterInput, limit: Int, nextToken: String): ModelParticipantConnection @aws_api_key @aws_iam
  getTransaction(id: ID!): Transaction @aws_api_key @aws_iam
  listTransactions(filter: ModelTransactionFilterInput, limit: Int, nextToken: String): ModelTransactionConnection @aws_api_key @aws_iam
  transactionsByAccountID(accountID: ID!, sortDirection: ModelSortDirection, filter: ModelTransactionFilterInput, limit: Int, nextToken: String): ModelTransactionConnection @aws_api_key @aws_iam
  getAccount(id: ID!): Account @aws_api_key @aws_iam
  listAccounts(filter: ModelAccountFilterInput, limit: Int, nextToken: String): ModelAccountConnection @aws_api_key @aws_iam
  accountsByInstitutionID(institutionID: ID!, sortDirection: ModelSortDirection, filter: ModelAccountFilterInput, limit: Int, nextToken: String): ModelAccountConnection @aws_api_key @aws_iam
  getInstitution(id: ID!): Institution @aws_api_key @aws_iam
  listInstitutions(filter: ModelInstitutionFilterInput, limit: Int, nextToken: String): ModelInstitutionConnection @aws_api_key @aws_iam
}

input ModelParticipantConditionInput {
  name: ModelStringInput
  reference: ModelStringInput
  address: ModelStringInput
  city: ModelStringInput
  stateProv: ModelStringInput
  postalCode: ModelStringInput
  and: [ModelParticipantConditionInput]
  or: [ModelParticipantConditionInput]
  not: ModelParticipantConditionInput
}

input CreateParticipantInput {
  id: ID
  name: String
  reference: String
  address: String
  city: String
  stateProv: String
  postalCode: String
}

input UpdateParticipantInput {
  id: ID!
  name: String
  reference: String
  address: String
  city: String
  stateProv: String
  postalCode: String
}

input DeleteParticipantInput {
  id: ID!
}

type Mutation {
  createParticipant(input: CreateParticipantInput!, condition: ModelParticipantConditionInput): Participant @aws_api_key @aws_iam
  updateParticipant(input: UpdateParticipantInput!, condition: ModelParticipantConditionInput): Participant @aws_api_key @aws_iam
  deleteParticipant(input: DeleteParticipantInput!, condition: ModelParticipantConditionInput): Participant @aws_api_key @aws_iam
  createTransaction(input: CreateTransactionInput!, condition: ModelTransactionConditionInput): Transaction @aws_api_key @aws_iam
  updateTransaction(input: UpdateTransactionInput!, condition: ModelTransactionConditionInput): Transaction @aws_api_key @aws_iam
  deleteTransaction(input: DeleteTransactionInput!, condition: ModelTransactionConditionInput): Transaction @aws_api_key @aws_iam
  createAccount(input: CreateAccountInput!, condition: ModelAccountConditionInput): Account @aws_api_key @aws_iam
  updateAccount(input: UpdateAccountInput!, condition: ModelAccountConditionInput): Account @aws_api_key @aws_iam
  deleteAccount(input: DeleteAccountInput!, condition: ModelAccountConditionInput): Account @aws_api_key @aws_iam
  createInstitution(input: CreateInstitutionInput!, condition: ModelInstitutionConditionInput): Institution @aws_api_key @aws_iam
  updateInstitution(input: UpdateInstitutionInput!, condition: ModelInstitutionConditionInput): Institution @aws_api_key @aws_iam
  deleteInstitution(input: DeleteInstitutionInput!, condition: ModelInstitutionConditionInput): Institution @aws_api_key @aws_iam
}

input ModelSubscriptionParticipantFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  reference: ModelSubscriptionStringInput
  address: ModelSubscriptionStringInput
  city: ModelSubscriptionStringInput
  stateProv: ModelSubscriptionStringInput
  postalCode: ModelSubscriptionStringInput
  and: [ModelSubscriptionParticipantFilterInput]
  or: [ModelSubscriptionParticipantFilterInput]
}

type Subscription {
  onCreateParticipant(filter: ModelSubscriptionParticipantFilterInput): Participant @aws_subscribe(mutations: ["createParticipant"]) @aws_api_key @aws_iam
  onUpdateParticipant(filter: ModelSubscriptionParticipantFilterInput): Participant @aws_subscribe(mutations: ["updateParticipant"]) @aws_api_key @aws_iam
  onDeleteParticipant(filter: ModelSubscriptionParticipantFilterInput): Participant @aws_subscribe(mutations: ["deleteParticipant"]) @aws_api_key @aws_iam
  onCreateTransaction(filter: ModelSubscriptionTransactionFilterInput): Transaction @aws_subscribe(mutations: ["createTransaction"]) @aws_api_key @aws_iam
  onUpdateTransaction(filter: ModelSubscriptionTransactionFilterInput): Transaction @aws_subscribe(mutations: ["updateTransaction"]) @aws_api_key @aws_iam
  onDeleteTransaction(filter: ModelSubscriptionTransactionFilterInput): Transaction @aws_subscribe(mutations: ["deleteTransaction"]) @aws_api_key @aws_iam
  onCreateAccount(filter: ModelSubscriptionAccountFilterInput): Account @aws_subscribe(mutations: ["createAccount"]) @aws_api_key @aws_iam
  onUpdateAccount(filter: ModelSubscriptionAccountFilterInput): Account @aws_subscribe(mutations: ["updateAccount"]) @aws_api_key @aws_iam
  onDeleteAccount(filter: ModelSubscriptionAccountFilterInput): Account @aws_subscribe(mutations: ["deleteAccount"]) @aws_api_key @aws_iam
  onCreateInstitution(filter: ModelSubscriptionInstitutionFilterInput): Institution @aws_subscribe(mutations: ["createInstitution"]) @aws_api_key @aws_iam
  onUpdateInstitution(filter: ModelSubscriptionInstitutionFilterInput): Institution @aws_subscribe(mutations: ["updateInstitution"]) @aws_api_key @aws_iam
  onDeleteInstitution(filter: ModelSubscriptionInstitutionFilterInput): Institution @aws_subscribe(mutations: ["deleteInstitution"]) @aws_api_key @aws_iam
}

type ModelTransactionConnection @aws_api_key @aws_iam {
  items: [Transaction]!
  nextToken: String
}

input ModelTransactionFilterInput {
  id: ModelIDInput
  transDate: ModelStringInput
  accountID: ModelIDInput
  category: ModelStringInput
  type: ModelStringInput
  notes: ModelStringInput
  cleared: ModelBooleanInput
  amount: ModelFloatInput
  and: [ModelTransactionFilterInput]
  or: [ModelTransactionFilterInput]
  not: ModelTransactionFilterInput
  transactionParticipantId: ModelIDInput
}

input ModelTransactionConditionInput {
  transDate: ModelStringInput
  accountID: ModelIDInput
  category: ModelStringInput
  type: ModelStringInput
  notes: ModelStringInput
  cleared: ModelBooleanInput
  amount: ModelFloatInput
  and: [ModelTransactionConditionInput]
  or: [ModelTransactionConditionInput]
  not: ModelTransactionConditionInput
  transactionParticipantId: ModelIDInput
}

input CreateTransactionInput {
  id: ID
  transDate: AWSDate
  accountID: ID!
  category: String
  type: String
  notes: String
  cleared: Boolean
  amount: Float
  transactionParticipantId: ID
}

input UpdateTransactionInput {
  id: ID!
  transDate: AWSDate
  accountID: ID
  category: String
  type: String
  notes: String
  cleared: Boolean
  amount: Float
  transactionParticipantId: ID
}

input DeleteTransactionInput {
  id: ID!
}

input ModelSubscriptionTransactionFilterInput {
  id: ModelSubscriptionIDInput
  transDate: ModelSubscriptionStringInput
  accountID: ModelSubscriptionIDInput
  category: ModelSubscriptionStringInput
  type: ModelSubscriptionStringInput
  notes: ModelSubscriptionStringInput
  cleared: ModelSubscriptionBooleanInput
  amount: ModelSubscriptionFloatInput
  and: [ModelSubscriptionTransactionFilterInput]
  or: [ModelSubscriptionTransactionFilterInput]
}

type ModelAccountConnection @aws_api_key @aws_iam {
  items: [Account]!
  nextToken: String
}

input ModelAccountFilterInput {
  id: ModelIDInput
  reference: ModelStringInput
  type: ModelStringInput
  balance: ModelFloatInput
  institutionID: ModelIDInput
  and: [ModelAccountFilterInput]
  or: [ModelAccountFilterInput]
  not: ModelAccountFilterInput
}

input ModelAccountConditionInput {
  reference: ModelStringInput
  type: ModelStringInput
  balance: ModelFloatInput
  institutionID: ModelIDInput
  and: [ModelAccountConditionInput]
  or: [ModelAccountConditionInput]
  not: ModelAccountConditionInput
}

input CreateAccountInput {
  id: ID
  reference: String
  type: String
  balance: Float
  institutionID: ID!
}

input UpdateAccountInput {
  id: ID!
  reference: String
  type: String
  balance: Float
  institutionID: ID
}

input DeleteAccountInput {
  id: ID!
}

input ModelSubscriptionAccountFilterInput {
  id: ModelSubscriptionIDInput
  reference: ModelSubscriptionStringInput
  type: ModelSubscriptionStringInput
  balance: ModelSubscriptionFloatInput
  institutionID: ModelSubscriptionIDInput
  and: [ModelSubscriptionAccountFilterInput]
  or: [ModelSubscriptionAccountFilterInput]
}

type ModelInstitutionConnection @aws_api_key @aws_iam {
  items: [Institution]!
  nextToken: String
}

input ModelInstitutionFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  and: [ModelInstitutionFilterInput]
  or: [ModelInstitutionFilterInput]
  not: ModelInstitutionFilterInput
}

input ModelInstitutionConditionInput {
  name: ModelStringInput
  and: [ModelInstitutionConditionInput]
  or: [ModelInstitutionConditionInput]
  not: ModelInstitutionConditionInput
}

input CreateInstitutionInput {
  id: ID
  name: String
}

input UpdateInstitutionInput {
  id: ID!
  name: String
}

input DeleteInstitutionInput {
  id: ID!
}

input ModelSubscriptionInstitutionFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  and: [ModelSubscriptionInstitutionFilterInput]
  or: [ModelSubscriptionInstitutionFilterInput]
}

